;; ton-education-contract.fc
;; TON EDUCATION Smart Contract for rewards and certificates

(int) op::eq (int x, int y) inline {
  return x == y;
}

(int) op::gt (int x, int y) inline {
  return x > y;
}

(int) op::lt (int x, int y) inline {
  return x < y;
}

() throw_unless (int cond, int err_code) inline {
  throw_if (cond != -1, err_code);
}

() send_ton(slice to, int amount, int mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();
  send_raw_message(msg, mode);
}

() send_nft(slice to, cell nft_content, int mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x5fcc3d14, 32) ;; op::transfer
    .store_uint(0, 64) ;; query_id
    .store_slice(to)
    .store_uint(0, 2) ;; empty custom payload
    .store_coins(0) ;; forward ton amount
    .store_uint(1, 1) ;; forward payload in this cell
    .store_ref(nft_content)
    .end_cell();
  send_raw_message(msg, mode);
}

global int min_reward = 10000000; ;; 0.01 TON
global int max_reward = 20000000; ;; 0.02 TON
global int course_completion_fee = 5000000; ;; 0.005 TON

;; Storage structure
;; _ balance:uint64
;; _ owner_addr:MsgAddress
;; _ admin_addr:MsgAddress
;; _ course_fee:uint64
;; _ course_completions:uint64
;; _ certificates_minted:uint64

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
  slice sender = in_msg_body~load_msg_addr();
  int op = in_msg_body~load_uint(32);
  
  ;; Admin operations
  if (op == 0x654a120) { ;; set_min_reward
    throw_unless(sender == get_data().begin_parse().skip_bits(64).load_msg_addr(), 401); ;; Only owner
    min_reward = in_msg_body~load_coins();
    return ();
  }
  
  if (op == 0x654a121) { ;; set_max_reward
    throw_unless(sender == get_data().begin_parse().skip_bits(64).load_msg_addr(), 401); ;; Only owner
    max_reward = in_msg_body~load_coins();
    return ();
  }
  
  if (op == 0x654a122) { ;; withdraw_ton
    throw_unless(sender == get_data().begin_parse().skip_bits(64).load_msg_addr(), 401); ;; Only owner
    int amount = in_msg_body~load_coins();
    slice to = in_msg_body~load_msg_addr();
    send_ton(to, amount, 3);
    return ();
  }
  
  ;; User operations
  if (op == 0x654a123) { ;; complete_course
    ;; Verify payment
    throw_unless(msg_value >= course_completion_fee, 402); ;; Insufficient fee
    
    ;; Generate random reward (simplified for MVP)
    int random_value = in_msg_body~load_uint(32);
    int reward = min_reward + ((random_value % (max_reward - min_reward + 1)));
    
    ;; Send reward to user
    send_ton(sender, reward, 3);
    
    ;; Mint NFT certificate
    slice user_name = in_msg_body~load_slice();
    slice course_name = in_msg_body~load_slice();
    int completion_date = in_msg_body~load_uint(32);
    
    cell nft_content = begin_cell()
      .store_uint(0x1, 8) ;; NFT content prefix
      .store_slice("https://ton-education.app/certificates/")
      .store_slice(user_name)
      .store_slice("/")
      .store_slice(course_name)
      .store_slice(".json")
      .end_cell();
    
    send_nft(sender, nft_content, 3);
    
    ;; Update storage
    set_data(begin_cell()
      .store_coins(get_data().begin_parse().preload_uint(64) ;; balance
      .store_slice(get_data().begin_parse().skip_bits(64).load_msg_addr()) ;; owner
      .store_slice(get_data().begin_parse().skip_bits(64 + 267).load_msg_addr()) ;; admin
      .store_coins(get_data().begin_parse().skip_bits(64 + 267 + 267).preload_uint(64)) ;; course_fee
      .store_uint(get_data().begin_parse().skip_bits(64 + 267 + 267 + 64).preload_uint(64) + 1, 64) ;; course_completions++
      .store_uint(get_data().begin_parse().skip_bits(64 + 267 + 267 + 64 + 64).preload_uint(64) + 1, 64) ;; certificates_minted++
      .end_cell());
    
    return ();
  }
  
  ;; Default action - just accept TON
  return ();
}
